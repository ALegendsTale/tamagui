{"pageProps":{"frontmatter":{"title":"Introduction","description":"The how and why of Tamagui","slug":"introduction","readingTime":{"text":"4 min read","minutes":3.255,"time":195300,"words":651}},"code":"var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var o=n=>a(n,\"__esModule\",{value:!0});var g=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),y=(n,t)=>{o(n);for(var r in t)a(n,r,{get:t[r],enumerable:!0})},v=(n,t,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let i of p(t))!m.call(n,i)&&i!==\"default\"&&a(n,i,{get:()=>t[i],enumerable:!(r=c(t,i))||r.enumerable});return n},f=n=>v(o(a(n!=null?l(u(n)):{},\"default\",n&&n.__esModule&&\"default\"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var h=g((x,d)=>{d.exports=_jsx_runtime});var k={};y(k,{default:()=>b});var e=f(h());function w(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,Object.assign({},n,{children:(0,e.jsx)(r,{})})):r();function r(){let i=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\",code:\"code\",h3:\"h3\",h2:\"h2\",hr:\"hr\"},n.components),{Image:s}=i;return s||S(\"Image\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(i.p,{children:\"Tamagui is a light layer above React Native / React Native Web, it augments rather than replaces it. Tamagui's goal is simple: letting you share much more code between your web and native apps. It does that by improving a few things:\"}),`\n`,(0,e.jsxs)(i.ul,{children:[`\n`,(0,e.jsxs)(i.li,{children:[(0,e.jsx)(i.strong,{children:\"Responsive styles\"}),\" \\u2014 media queries that avoid JS when possible\"]}),`\n`,(0,e.jsxs)(i.li,{children:[(0,e.jsx)(i.strong,{children:\"Themes\"}),\" \\u2014 that also avoid running JS\"]}),`\n`,(0,e.jsxs)(i.li,{children:[(0,e.jsx)(i.strong,{children:\"Inline styles\"}),\" \\u2014 that extract at compile-time out of render\"]}),`\n`]}),`\n`,(0,e.jsx)(i.p,{children:\"Today, you can't share code between Native and Web without resorting to doing media queries, themes and styles in JavaScript, which slows critical areas down and makes things generally clunky enough that it makes sense to write them separately.\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Tamagui works backwards from ideal syntax - both inline styles and hooks - and then on the web generates \",(0,e.jsx)(i.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\",children:\"CSS media queries\"}),\" and \",(0,e.jsx)(i.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\",children:\"CSS variables\"}),\" when possible. On native it extracts everything to StyleSheet.create. This makes everything fast. The compiler goes further and flattens what would have been a \",(0,e.jsx)(i.code,{children:\"View\"}),\" or \",(0,e.jsx)(i.code,{children:\"Text\"}),\" into a plain \",(0,e.jsx)(i.code,{children:\"div\"}),\" or \",(0,e.jsx)(i.code,{children:\"span\"}),\" when possible, further helping performance.\"]}),`\n`,(0,e.jsx)(s,{alt:\"Tamagui logo with a purple and blue gradient\",src:\"/docs-intro.svg\"}),`\n`,(0,e.jsx)(i.h3,{id:\"react-native-\\uFE0F\",children:\"React Native \\u2764\\uFE0F\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Work with your favorite libraries: \",(0,e.jsx)(i.code,{children:\"react-native\"}),\" and \",(0,e.jsx)(i.code,{children:\"react-native-web\"}),\". Tamagui improves typical performance with an optimizing compiler - especially with media queries, themes, and dynamic styles.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"themed-responsive\",children:\"Themed, Responsive\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Hooks \",(0,e.jsx)(i.code,{children:\"useTheme\"}),\" and \",(0,e.jsx)(i.code,{children:\"useMedia\"}),\" and inline theme and media styling work just how you'd expect them to. But they compile to clean CSS media queries and CSS variables.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"faster-runtime\",children:\"Faster Runtime\"}),`\n`,(0,e.jsx)(i.p,{children:\"Not just 0 prop interpolation, but 0 prop interpolation on inline styles and dynamic styles. Even with complex logical styling you get less runtime, light CSS output, and flatter component trees. Plus CSS media queries and CSS variables run much faster than JS ones.\"}),`\n`,(0,e.jsx)(i.h3,{id:\"less-runtime\",children:\"Less Runtime\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Less JS to parse, especially when doing logic in your render function. Ternaries, object spreads, and more get extracted. Strictly style components (with no un-parseable props) are flattened to \",(0,e.jsx)(i.code,{children:\"div\"}),\" or \",(0,e.jsx)(i.code,{children:\"span\"}),\", saving tree depth and hook calls.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"server-side-rendering\",children:\"Server-Side Rendering\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Tamagui supports cross-browser server-side rendering (\",(0,e.jsx)(i.a,{href:\"https://github.com/tamagui/tamagui/tree/master/packages/site\",children:\"see how we do it with next.js\"}),\"), even for responsive styles and variants.\"]}),`\n`,(0,e.jsx)(i.h2,{id:\"key-features\",children:\"Key Features\"}),`\n`,(0,e.jsx)(i.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsxs)(i.p,{children:[(0,e.jsx)(i.a,{href:\"/docs/core/styled\",children:\"Variants\"}),\" as a first-class citizen, so you can design composable component APIs. Define a single variant, multiple variants, and even \",(0,e.jsx)(i.a,{href:\"/docs/core/styled#spread-variants\",children:\"Spread Variants\"}),\" which allow you to return dynamic styles, even at compile-time.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"tokens\",children:\"Tokens\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Define your own \",(0,e.jsx)(i.a,{href:\"/docs/intro/configuration\",children:\"tokens\"}),\" and seamlessly apply them as CSS values. CSS Properties are automatically mapped to token scales. Tokens can even be used in shorthand CSS properties.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"themes\",children:\"Themes\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Tamagui provides a simple \",(0,e.jsx)(i.a,{href:\"/docs/intro/themes\",children:\"theming\"}),\" experience out of the box. Create as many themes as you need, and apply them wherever you want. Each theme generates a CSS class name which overrides the default tokens.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"shorthands\",children:\"Shorthands\"}),`\n`,(0,e.jsxs)(i.p,{children:[(0,e.jsx)(i.a,{href:\"/docs/intro/configuration#shorthands\",children:\"Shorthands\"}),\" allow you to map shorthand properties to their longer cousins. This lets you create Tailwinds-like quick properties to style. These work with TypeScript as well, and are designed so you can bring them with you across different tamagui component kits.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"responsive\",children:\"Responsive\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Tamagui lets you configure \",(0,e.jsx)(i.a,{href:\"/docs/core/use-media\",children:\"media queries\"}),\" and apply variants responsively using \",(0,e.jsx)(i.code,{children:\"$\"}),\" props.\"]}),`\n`,(0,e.jsx)(i.h3,{id:\"developer-experience\",children:\"Developer Experience\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"Tamagui provides a fully-typed API so all your TypeScript style properties, values, media queries and shorthands will be auto-completed for you. It provides a \",(0,e.jsx)(i.code,{children:\"// debug\"}),\" pragrma and \",(0,e.jsx)(i.code,{children:\"debug\"}),\" prop that both allow easy introspection into whats happening at compile and runtime.\"]}),`\n`,(0,e.jsx)(i.hr,{}),`\n`,(0,e.jsx)(i.h2,{id:\"community\",children:\"Community\"}),`\n`,(0,e.jsx)(i.p,{children:\"We're excited to see the community adopt Tamagui, raise issues, and provide feedback. Whether it's a feature request, bug report, or a project to showcase, please get involved!\"}),`\n`,(0,e.jsxs)(i.ul,{children:[`\n`,(0,e.jsx)(i.li,{children:(0,e.jsx)(i.a,{href:\"https://discord.gg/uUtvv6GM\",children:\"Discord\"})}),`\n`,(0,e.jsx)(i.li,{children:(0,e.jsx)(i.a,{href:\"https://twitter.com/tamagui_dev\",children:\"Twitter\"})}),`\n`,(0,e.jsx)(i.li,{children:(0,e.jsx)(i.a,{href:\"https://github.com/tamagui/tamagui/discussions\",children:\"GitHub Discussions\"})}),`\n`,(0,e.jsx)(i.li,{children:(0,e.jsx)(i.a,{href:\"https://github.com/tamagui/tamagui\",children:\"GitHub\"})}),`\n`]}),`\n`,(0,e.jsx)(i.hr,{}),`\n`,(0,e.jsx)(i.h2,{id:\"credits\",children:\"Credits\"}),`\n`,(0,e.jsx)(i.p,{children:\"A big thanks to:\"}),`\n`,(0,e.jsxs)(i.ul,{children:[`\n`,(0,e.jsxs)(i.li,{children:[(0,e.jsx)(i.a,{href:\"https://github.com/jsxstyle/jsxstyle\",children:\"JSXStyle\"}),\" for providing the original forked repo.\"]}),`\n`,(0,e.jsxs)(i.li,{children:[(0,e.jsx)(i.a,{href:\"https://github.com/modulz\",children:\"Modulz\"}),\" for the bones of the website.\"]}),`\n`]})]})}}var b=w;function S(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k;})();\n;return Component;"},"__N_SSG":true}