{"pageProps":{"frontmatter":{"title":"Benchmarks","description":"Performance tests and comparisons.","slug":"benchmarks","readingTime":{"text":"2 min read","minutes":1.995,"time":119700,"words":399}},"code":"var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var l=n=>o(n,\"__esModule\",{value:!0});var b=(n,a)=>()=>(a||n((a={exports:{}}).exports,a),a.exports),f=(n,a)=>{l(n);for(var i in a)o(n,i,{get:a[i],enumerable:!0})},v=(n,a,i)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let t of u(a))!y.call(n,t)&&t!==\"default\"&&o(n,t,{get:()=>a[t],enumerable:!(i=p(a,t))||i.enumerable});return n},w=n=>v(l(o(n!=null?d(g(n)):{},\"default\",n&&n.__esModule&&\"default\"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var h=b((E,c)=>{c.exports=_jsx_runtime});var j={};f(j,{default:()=>T,frontmatter:()=>k});var e=w(h()),k={title:\"Benchmarks\",description:\"Performance tests and comparisons.\"};function x(n={}){let{wrapper:a}=n.components||{};return a?(0,e.jsx)(a,Object.assign({},n,{children:(0,e.jsx)(i,{})})):i();function i(){let t=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",h3:\"h3\",blockquote:\"blockquote\",hr:\"hr\",h2:\"h2\"},n.components),{Notice:s,BenchmarkChart:r}=t;return r||m(\"BenchmarkChart\",!0),s||m(\"Notice\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(t.p,{children:[\"We've forked a common test suite for styling libraries. All tests were run in a production environment on a Macbook M1 Pro (2021). The \",(0,e.jsx)(t.a,{href:\"https://github.com/tamagui/tamagui/tree/master/src/packages/benchmarks\",children:\"benchmarks\"}),\" are open-source.\"]}),`\n`,(0,e.jsxs)(s,{children:[(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": These benchmarks are competing against \",(0,e.jsx)(t.strong,{children:\"web-only\"}),` style libraries. Those libraries\nshould have a big advantage as they basically can render directly to DOM, while Tamagui supports\nthe far richer and larger React Native API for every component. Still, we think Tamagui does well.`]}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(t.p,{children:`Next, we'll add a comparison to react-native-web and NativeBase, where it should show an ever\nbigger difference.`})]}),`\n`,(0,e.jsx)(t.h3,{id:\"initial-injection\",children:\"Initial injection\"}),`\n`,(0,e.jsx)(t.p,{children:\"The timing that it takes to inject the initial styles.\"}),`\n`,(0,e.jsx)(r,{data:[{name:\"Tamagui\",value:.018},{name:\"react-native-web\",value:.057},{name:\"Stitches\",value:.023},{name:\"Emotion\",value:.041}]}),`\n`,(0,e.jsx)(t.h3,{id:\"updating-variants\",children:\"Updating variants\"}),`\n`,(0,e.jsx)(t.p,{children:\"Changing variants is fast at runtime, and even faster when compiled:\"}),`\n`,(0,e.jsx)(r,{data:[{name:\"Tamagui\",value:.026},{name:\"react-native-web\",value:.063},{name:\"Stitches\",value:.037},{name:\"Emotion\",value:.069},{name:\"styled-components\",value:.081}]}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsx)(t.p,{children:\"Note: Since styled-components and Emotion don't offer a first-class variant API, this was done via prop interpolation.\"}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"updating-inline-styles\",children:\"Updating inline styles\"}),`\n`,(0,e.jsx)(t.p,{children:\"Tamagui has a big advantage for inline styles, it's the only library to compile them.\"}),`\n`,(0,e.jsx)(r,{data:[{name:\"Tamagui\",value:.025},{name:\"react-native-web\",value:.06},{name:\"Stitches\",value:.027},{name:\"Emotion\",value:.047}]}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(t.p,{children:\"Note, the next two tests are not really testing styling performance at all, as they're mostly testing the internals of the component. We think they don't represent anything close to a typical application, but we've left them in to be charitable.\"}),`\n`,(0,e.jsx)(t.p,{children:\"In general, the plan is to add a new test that does represent better a good mix of use cases as the current tests here are all very micro.\"}),`\n`,(0,e.jsx)(t.h3,{id:\"dynamic-styles-no-compilation\",children:\"Dynamic styles (no compilation)\"}),`\n`,(0,e.jsx)(t.p,{children:\"Tamagui components are far more feature-rich than other styling libraries, so in the worst case where every component isn't extracted, you get middle-of-the-road performance. Basically, the next two tests represent extremely rare cases.\"}),`\n`,(0,e.jsx)(r,{data:[{name:\"Tamagui\",value:17.25},{name:\"Stitches\",value:14.5},{name:\"Emotion\",value:49.01}]}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"Note: This test was taken from the \",(0,e.jsx)(t.a,{href:\"https://github.com/styled-components/styled-components/tree/main/packages/benchmarks\",children:\"styled-components benchmarks\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"mounting-deep-tree\",children:\"Mounting deep tree\"}),`\n`,(0,e.jsx)(t.p,{children:\"In this test, we mount a tree with many nested nodes.\"}),`\n`,(0,e.jsx)(r,{data:[{name:\"Tamagui\",value:11.92},{name:\"Stitches\",value:8.32},{name:\"Emotion\",value:42.49},{name:\"styled-components\",value:51.4}]}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"Note: This test was taken from the \",(0,e.jsx)(t.a,{href:\"https://github.com/styled-components/styled-components/tree/main/packages/benchmarks\",children:\"styled-components benchmarks\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"summary\",children:\"Summary\"}),`\n`,(0,e.jsx)(t.p,{children:\"Tamagui greatly increases render performance and compares well to the best web-only style libraries. We' plan to add comparisons to other cross-platform style libraries in the future as we should fare well against them.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Tamagui will also dramatically outperform for media queries and themes, which will be in upcoming tests.\"})]})}}var T=x;function m(n,a){throw new Error(\"Expected \"+(a?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j;})();\n;return Component;"},"__N_SSG":true}