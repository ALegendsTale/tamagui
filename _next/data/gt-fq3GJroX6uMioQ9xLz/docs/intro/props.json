{"pageProps":{"frontmatter":{"title":"Tamagui Props","description":"All the properties supported on base Tamagui components.","slug":"props","readingTime":{"text":"4 min read","minutes":3.855,"time":231300,"words":771}},"code":"var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var o=a=>r(a,\"__esModule\",{value:!0});var y=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),g=(a,t)=>{o(a);for(var s in t)r(a,s,{get:t[s],enumerable:!0})},f=(a,t,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of h(t))!m.call(a,n)&&n!==\"default\"&&r(a,n,{get:()=>t[n],enumerable:!(s=p(t,n))||s.enumerable});return a},k=a=>f(o(r(a!=null?d(u(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var c=y((T,l)=>{l.exports=_jsx_runtime});var x={};g(x,{default:()=>b,frontmatter:()=>N});var e=k(c()),N={title:\"Tamagui Props\",description:\"All the properties supported on base Tamagui components.\"};function v(a={}){let{wrapper:t}=a.components||{};return t?(0,e.jsx)(t,Object.assign({},a,{children:(0,e.jsx)(s,{})})):s();function s(){let n=Object.assign({p:\"p\",a:\"a\",code:\"code\",span:\"span\",strong:\"strong\",h3:\"h3\",pre:\"pre\",div:\"div\",h4:\"h4\"},a.components),{PropsTable:i}=n;return i||w(\"PropsTable\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Tamagui uses a superset of the style properties that are supported in React Native and React Native Web, and flattens them onto the direct properties of Stack and Text (\",(0,e.jsx)(n.a,{href:\"#why-inline-style-props\",children:\"see why below\"}),\"). For the full list of style and non-style props, see \",(0,e.jsx)(n.a,{href:\"https://reactnative.dev/docs/view-style-props\",children:\"View\"}),\" and \",(0,e.jsx)(n.a,{href:\"https://reactnative.dev/docs/text-style-props\",children:\"Text\"}),\" from the react native documentation.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Beyond style properties, Tamagui adds \",(0,e.jsx)(n.code,{children:\"className\"}),\" and \",(0,e.jsx)(n.code,{children:\"tag\"}),\":\"]}),`\n`,(0,e.jsx)(i,{data:[{name:\"className\",required:!1,type:\"string\",description:(0,e.jsxs)(n.span,{children:[(0,e.jsx)(n.strong,{children:\"Web Only\"}),\": Only affects web apps, giving an escape hatch to set the className directly. This works fully with the compiler, which will concat your defined className with its generated class names.\"]})},{name:\"tag\",required:!1,type:\"string\",description:(0,e.jsxs)(n.span,{children:[(0,e.jsx)(n.strong,{children:\"Web Only\"}),\": Renders the final DOM property using the given tag.\"]})},{name:\"space\",required:!1,type:\"boolean | string | TamaguiConfig['space']\",description:(0,e.jsx)(n.span,{children:\" Spacing is built into Tamagui and can accept a number or token.space value. This will filter out any nullish child elements and insert a spacer component between the remaining elements.\"})},{name:\"debug\",required:!1,type:\"boolean\",description:(0,e.jsx)(n.span,{children:\" When set to true Tamagui will output a variety of helpful information on how it parsed and applied styling.\"})}]}),`\n`,(0,e.jsx)(n.p,{children:\"For styling, Tamagui adds flattened transform properties, pseudo states and media queries:\"}),`\n`,(0,e.jsx)(n.h3,{id:\"flat-transform-properties\",children:\"Flat transform properties\"}),`\n`,(0,e.jsx)(i,{data:[{name:\"x\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ translateX }]\"},{name:\"y\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ translateY }]\"},{name:\"scale\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ scale }]\"},{name:\"perspective\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ perspective }]\"},{name:\"scaleX\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ scaleX }]\"},{name:\"scaleY\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ scaleY }]\"},{name:\"skewX\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ skewX }]\"},{name:\"skewY\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ skewY }]\"},{name:\"matrix\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ matrix }]\"},{name:\"rotate\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ rotate }]\"},{name:\"rotateY\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ rotateY }]\"},{name:\"rotateX\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ rotateX }]\"},{name:\"rotateZ\",required:!1,type:\"string | number\",description:\"Maps to transform: [{ rotateZ }]\"}]}),`\n`,(0,e.jsx)(n.h3,{id:\"pseudo-style-props\",children:\"Pseudo style props\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Support for \",(0,e.jsx)(n.code,{children:\"hoverStyle\"}),\" and \",(0,e.jsx)(n.code,{children:\"pressStyle\"}),\" is helpful as it turns what typically is complex stateful code into pure CSS on web, and a more performant StyleSheet.create (compared to inline styles) for native. They can be used with media queries as well.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:(0,e.jsxs)(n.div,{\"data-line\":\"1\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[(0,e.jsxs)(n.span,{className:\"token tag\",children:[(0,e.jsxs)(n.span,{className:\"token tag\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Text\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"color\"}),(0,e.jsxs)(n.span,{className:\"token attr-value\",children:[(0,e.jsx)(n.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:'\"'}),\"red\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"hoverStyle\"}),(0,e.jsxs)(n.span,{className:\"token script language-javascript\",children:[(0,e.jsx)(n.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'blue'\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,e.jsx)(i,{data:[{name:\"hoverStyle\",required:!1,type:\"TamaguiStyleProps\"},{name:\"pressStyle\",required:!1,type:\"TamaguiStyleProps\"}]}),`\n`,(0,e.jsx)(n.h3,{id:\"media-query-style-props\",children:\"Media query style props\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Based on whatever media queries you define in \",(0,e.jsx)(n.code,{children:\"createTamagui\"}),\", you can now use any of them to apply styling on native and web using the \",(0,e.jsx)(n.code,{children:\"$\"}),\" prefix.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"If you defined your media query like:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.div,{\"data-line\":\"1\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"createTamagui\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.div,{\"data-line\":\"2\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[\"  media\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.div,{\"data-line\":\"3\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[\"    sm\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" maxWidth\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"800\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.div,{\"data-line\":\"4\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.div,{\"data-line\":\"5\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Then you can use it like:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:(0,e.jsxs)(n.div,{\"data-line\":\"1\",className:\"highlight-line\",\"data-highlighted\":\"true\",children:[(0,e.jsxs)(n.span,{className:\"token tag\",children:[(0,e.jsxs)(n.span,{className:\"token tag\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Text\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"color\"}),(0,e.jsxs)(n.span,{className:\"token attr-value\",children:[(0,e.jsx)(n.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:'\"'}),\"red\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"$sm\"}),(0,e.jsxs)(n.span,{className:\"token script language-javascript\",children:[(0,e.jsx)(n.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'blue'\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,e.jsx)(n.h3,{id:\"why-inline-style-props\",children:\"Why inline style props?\"}),`\n`,(0,e.jsx)(n.h4,{id:\"-faster-to-write\",children:\"\\u{1F3CE} Faster to write\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Inline styles have a few developer-speed benefits over \",(0,e.jsx)(n.code,{children:\"StyleSheet.create\"}),\": they require fewer imports and fewer lines of code, and they save you from jumping between the top and bottom of your file whenever you want to change a style so you can see exactly whats happening where it's happening.\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"-easier-to-maintain-no-dead-code\",children:\"\\u{1F480} Easier to maintain, no dead code\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"StyleSheet.create\"}),\" forces you to manually link together the style with the node that's using the style. When you delete the style, you must delete the node, and when you delete a node, you have to manually check to be see if any other node is using that style before removing it.\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"\\uFE0F-less-vertical-space\",children:\"\\u2696\\uFE0F Less vertical space\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"When using shorthand style props, adding the overhead of a \",(0,e.jsx)(n.code,{children:\"style\"}),\", \",(0,e.jsx)(n.code,{children:\"css\"}),\", or \",(0,e.jsx)(n.code,{children:\"sx\"}),\" prop will often make the difference in keeping your styles to one line vs multiple (when say using something like Prettier). With Typescript, the flat props feel natural and easy to understand.\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"-less-forced-naming\",children:\"\\u{1F928} Less forced naming\"}),`\n`,(0,e.jsx)(n.p,{children:\"With StyleSheets you must name every style group, and even every ternary conditional style or else you lose performance. With inline styles you avoid both problems, leading to more creative experimentation and less friction.\"}),`\n`,(0,e.jsx)(n.h4,{id:\"-encourages-dynamic-styles\",children:\"\\u{1F483} Encourages dynamic styles\"}),`\n`,(0,e.jsx)(n.p,{children:\"Changing between a style that's determined by a ternary or conditional and one that's static shouldn't be a hard choice. With StyleSheet there's some friction as you have to either inline it and save time and readability or extract it to the bottom and gain performance. With inline styles (and the compiler) you no longer have that friction: convert any prop to have a ternary and it works the same, and runs fast.\"})]})}}var b=v;function w(a,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x;})();\n;return Component;"},"__N_SSG":true}