{"pageProps":{"frontmatter":{"title":"Benchmarks","description":"Performance tests and comparisons.","slug":"benchmarks","readingTime":{"text":"2 min read","minutes":1.61,"time":96600,"words":322}},"code":"var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var c=t=>r(t,\"__esModule\",{value:!0});var v=(t,a)=>()=>(a||t((a={exports:{}}).exports,a),a.exports),y=(t,a)=>{c(t);for(var i in a)r(t,i,{get:a[i],enumerable:!0})},b=(t,a,i)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let n of p(a))!f.call(t,n)&&n!==\"default\"&&r(t,n,{get:()=>a[n],enumerable:!(i=u(a,n))||i.enumerable});return t},w=t=>b(c(r(t!=null?d(g(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var h=v((S,l)=>{l.exports=_jsx_runtime});var x={};y(x,{default:()=>T});var e=w(h());function k(t={}){let{wrapper:a}=t.components||{};return a?(0,e.jsx)(a,Object.assign({},t,{children:(0,e.jsx)(i,{})})):i();function i(){let n=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",h3:\"h3\",blockquote:\"blockquote\",h2:\"h2\"},t.components),{Notice:s,BenchmarkChart:o}=n;return o||m(\"BenchmarkChart\",!0),s||m(\"Notice\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"We've forked a common test suite for styling libraries. All tests were run in a production environment on a Macbook M1 Pro (2021). The \",(0,e.jsx)(n.a,{href:\"https://github.com/tamagui/tamagui/tree/master/src/packages/benchmarks\",children:\"benchmarks\"}),\" are open-source.\"]}),`\n`,(0,e.jsxs)(s,{children:[(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": These benchmarks are competing against \",(0,e.jsx)(n.strong,{children:\"web-only\"}),` style libraries. Those libraries\nshould have a big advantage as they basically can render directly to DOM, while Tamagui supports\nthe far richer and larger React Native API for every component. Still, we think Tamagui does well.`]}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(n.p,{children:`Next, we'll add a comparison to react-native-web and NativeBase, where it should show an ever\nbigger difference.`})]}),`\n`,(0,e.jsx)(n.h3,{id:\"initial-injection\",children:\"Initial injection\"}),`\n`,(0,e.jsx)(n.p,{children:\"The timing that it takes to inject the initial styles.\"}),`\n`,(0,e.jsx)(o,{data:[{name:\"Tamagui\",value:.02},{name:\"Stitches\",value:.13},{name:\"Emotion\",value:.5}]}),`\n`,(0,e.jsx)(n.h3,{id:\"updating-variants\",children:\"Updating variants\"}),`\n`,(0,e.jsx)(n.p,{children:\"Changing variants is fast at runtime, and even faster when compiled:\"}),`\n`,(0,e.jsx)(o,{data:[{name:\"Tamagui\",value:.025},{name:\"Stitches\",value:.037},{name:\"Emotion\",value:.069},{name:\"styled-components\",value:.081}]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Note: Since styled-components and Emotion don't offer a first-class variant API, this was done via prop interpolation.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{id:\"updating-inline-styles\",children:\"Updating inline styles\"}),`\n`,(0,e.jsx)(n.p,{children:\"Tamagui has a big advantage for inline styles, it's the only library to compile them.\"}),`\n`,(0,e.jsx)(o,{data:[{name:\"Tamagui\",value:.013},{name:\"Stitches\",value:.038},{name:\"Emotion\",value:.49}]}),`\n`,(0,e.jsx)(n.h3,{id:\"dynamic-styles-no-compilation\",children:\"Dynamic styles (no compilation)\"}),`\n`,(0,e.jsx)(n.p,{children:\"Tamagui components are far more feature-rich than other styling libraries, so in the worst case where every component isn't extracted, you get middle-of-the-road performance. The good news is, this is an extreme case and rare, and we have a lot of low hanging fruit for improvement.\"}),`\n`,(0,e.jsx)(o,{data:[{name:\"Tamagui\",value:32.5},{name:\"Stitches\",value:14.5},{name:\"Emotion\",value:49.01}]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"Note: This test was taken from the \",(0,e.jsx)(n.a,{href:\"https://github.com/styled-components/styled-components/tree/main/packages/benchmarks\",children:\"styled-components benchmarks\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{id:\"mounting-deep-tree\",children:\"Mounting deep tree\"}),`\n`,(0,e.jsx)(n.p,{children:\"In this test, we mount a tree with many nested nodes.\"}),`\n`,(0,e.jsx)(o,{data:[{name:\"Tamagui\",value:15.59},{name:\"Stitches\",value:8.37},{name:\"Emotion\",value:42.49},{name:\"styled-components\",value:51.4}]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"Note: This test was taken from the \",(0,e.jsx)(n.a,{href:\"https://github.com/styled-components/styled-components/tree/main/packages/benchmarks\",children:\"styled-components benchmarks\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"summary\",children:\"Summary\"}),`\n`,(0,e.jsx)(n.p,{children:\"Our benchmarks compare against Stitches, styled-components and Emotion because they're the most popular CSS-in-JS libraries for the web.\"}),`\n`,(0,e.jsx)(n.p,{children:\"A few tests didn't run after upgrading Next.js for Emotion/styled-components, we've left them out for now.\"})]})}}var T=k;function m(t,a){throw new Error(\"Expected \"+(a?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x;})();\n;return Component;"},"__N_SSG":true}