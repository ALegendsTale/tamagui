{"pageProps":{"frontmatter":{"title":"Introduction","description":"The how and why of Tamagui","slug":"introduction","readingTime":{"text":"5 min read","minutes":4.735,"time":284100,"words":947}},"code":"var Component=(()=>{var c=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var s=i=>o(i,\"__esModule\",{value:!0});var g=(i,t)=>()=>(t||i((t={exports:{}}).exports,t),t.exports),f=(i,t)=>{for(var r in t)o(i,r,{get:t[r],enumerable:!0})},d=(i,t,r,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let a of u(t))!y.call(i,a)&&(r||a!==\"default\")&&o(i,a,{get:()=>t[a],enumerable:!(n=p(t,a))||n.enumerable});return i},v=(i,t)=>d(s(o(i!=null?c(m(i)):{},\"default\",!t&&i&&i.__esModule?{get:()=>i.default,enumerable:!0}:{value:i,enumerable:!0})),i),w=(i=>(t,r)=>i&&i.get(t)||(r=d(s({}),t,1),i&&i.set(t,r),r))(typeof WeakMap!=\"undefined\"?new WeakMap:0);var h=g((j,l)=>{l.exports=_jsx_runtime});var x={};f(x,{default:()=>k,frontmatter:()=>b});var e=v(h()),b={title:\"Introduction\",description:\"The how and why of Tamagui\"};function S(i={}){let{wrapper:t}=i.components||{};return t?(0,e.jsx)(t,Object.assign({},i,{children:(0,e.jsx)(r,{})})):r();function r(){let n=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\",code:\"code\",h3:\"h3\",h2:\"h2\",hr:\"hr\",h4:\"h4\"},i.components),{Image:a}=n;return a||T(\"Image\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Tamagui is a light layer above React Native / React Native Web, augmenting rather than replacing them. Tamagui's goal is simple: share a lot more code between web and native apps, without sacrificing look, feel and especially, performance. It's especially improves:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Responsive styling\"}),\" \\u2014 fully cross platform, easy to use, with amazing performance.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Theming\"}),\" \\u2014 works cross platform, fast, avoiding all runtime on web.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Inline styles\"}),\" \\u2014 that are typed, and extracted into atomic CSS at build-time.\"]}),`\n`]}),`\n`,(0,e.jsx)(a,{title:\"Tamagui logo\",src:\"/blog/introducing-tamagui/hero.png\"}),`\n`,(0,e.jsx)(n.p,{children:\"Today, you can't share code between Native and Web without resorting to writing media queries, themes and styles in JS. This slows things down a lot and generally feels clunky.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Tamagui works backwards from ideal syntax - both inline styles and hooks - and then on the web generates \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\",children:\"CSS media queries\"}),\" and \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\",children:\"CSS variables\"}),\" when possible. On native it extracts everything to StyleSheet.create. This makes everything fast. The compiler goes further and flattens what would have been a \",(0,e.jsx)(n.code,{children:\"View\"}),\" or \",(0,e.jsx)(n.code,{children:\"Text\"}),\" into a \",(0,e.jsx)(n.code,{children:\"div\"}),\" or \",(0,e.jsx)(n.code,{children:\"span\"}),\" when possible, improving performance.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"react-native-\\uFE0F\",children:\"React Native \\u2764\\uFE0F\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Work with your favorite libraries: \",(0,e.jsx)(n.code,{children:\"react-native\"}),\" and \",(0,e.jsx)(n.code,{children:\"react-native-web\"}),\". Tamagui improves typical performance with an optimizing compiler - especially with media queries, themes, and dynamic styles.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"themed-responsive\",children:\"Themed, Responsive\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Hooks \",(0,e.jsx)(n.code,{children:\"useTheme\"}),\" and \",(0,e.jsx)(n.code,{children:\"useMedia\"}),\" and inline theme and media styling work just how you'd expect them to. But they compile to clean CSS media queries and CSS variables.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"faster-runtime\",children:\"Faster Runtime\"}),`\n`,(0,e.jsx)(n.p,{children:\"Not just 0 prop interpolation, but 0 prop interpolation on inline styles and dynamic styles. Even with complex logical styling you get less runtime, light CSS output, and flatter component trees. Plus CSS media queries and CSS variables run much faster than JS ones.\"}),`\n`,(0,e.jsx)(n.h3,{id:\"less-runtime\",children:\"Less Runtime\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Less JS to parse, especially when doing logic in your render function. Ternaries, object spreads, and more get extracted. Strictly style components (with no un-parseable props) are flattened to \",(0,e.jsx)(n.code,{children:\"div\"}),\" or \",(0,e.jsx)(n.code,{children:\"span\"}),\", saving tree depth and hook calls.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"server-side-rendering\",children:\"Server-Side Rendering\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Tamagui supports cross-browser server-side rendering (\",(0,e.jsx)(n.a,{href:\"https://github.com/tamagui/tamagui/tree/master/packages/site\",children:\"see how we do it with Next.js\"}),\"), even for responsive styles and variants.\"]}),`\n`,(0,e.jsx)(n.h2,{id:\"key-features\",children:\"Key Features\"}),`\n`,(0,e.jsx)(n.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"/docs/core/styled\",children:\"Variants\"}),\" as a first-class citizen, so you can design composable component APIs. Define a single variant, multiple variants, and even \",(0,e.jsx)(n.a,{href:\"/docs/core/styled#spread-variants\",children:\"Spread Variants\"}),\" which allow you to return dynamic styles, even at compile-time.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"tokens\",children:\"Tokens\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Define your own \",(0,e.jsx)(n.a,{href:\"/docs/intro/configuration\",children:\"tokens\"}),\" and seamlessly apply them as CSS values. CSS Properties are automatically mapped to token scales. Tokens can even be used in shorthand CSS properties.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"themes\",children:\"Themes\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Tamagui provides a simple \",(0,e.jsx)(n.a,{href:\"/docs/intro/themes\",children:\"theming\"}),\" experience out of the box. Create as many themes as you need, and apply them wherever you want. Each theme generates a CSS class name which overrides the default tokens.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"shorthands\",children:\"Shorthands\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"/docs/intro/configuration#shorthands\",children:\"Shorthands\"}),\" allow you to map shorthand properties to their longer cousins. This lets you create Tailwinds-like quick properties to style. These work with TypeScript as well, and are designed so you can bring them with you across different tamagui component kits.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"responsive\",children:\"Responsive\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Tamagui lets you configure \",(0,e.jsx)(n.a,{href:\"/docs/core/use-media\",children:\"media queries\"}),\" and apply variants responsively using \",(0,e.jsx)(n.code,{children:\"$\"}),\" props.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"developer-experience\",children:\"Developer Experience\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Tamagui provides a fully-typed API so all your TypeScript style properties, values, media queries and shorthands will be auto-completed for you. It provides a \",(0,e.jsx)(n.code,{children:\"// debug\"}),\" pragma and \",(0,e.jsx)(n.code,{children:\"debug\"}),\" prop that both allow easy introspection into whats happening at compile and runtime. In dev mode it puts a \",(0,e.jsx)(n.code,{children:\"data-\"}),\" attribute that links every DOM node back to your original source.\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{id:\"why-inline-style-props\",children:\"Why inline style props?\"}),`\n`,(0,e.jsx)(n.h4,{id:\"-faster-to-write\",children:\"\\u{1F3CE} Faster to write\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Inline styles have a few developer-speed benefits over \",(0,e.jsx)(n.code,{children:\"StyleSheet.create\"}),\": they require fewer imports and fewer lines of code, and they save you from jumping between the top and bottom of your file whenever you want to change a style so you can see exactly whats happening where it's happening.\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"-easier-to-maintain-no-dead-code\",children:\"\\u{1F480} Easier to maintain, no dead code\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"StyleSheet.create\"}),\" forces you to manually link together the style with the node that's using the style. When you delete the style, you must delete the node, and when you delete a node, you have to manually check to be see if any other node is using that style before removing it.\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"\\uFE0F-less-vertical-space\",children:\"\\u2696\\uFE0F Less vertical space\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"When using shorthand style props, adding the overhead of a \",(0,e.jsx)(n.code,{children:\"style\"}),\", \",(0,e.jsx)(n.code,{children:\"css\"}),\", or \",(0,e.jsx)(n.code,{children:\"sx\"}),\" prop will often make the difference in keeping your styles to one line vs multiple (when say using something like Prettier). With Typescript, the flat props feel natural and easy to understand.\"]}),`\n`,(0,e.jsx)(n.h4,{id:\"-less-forced-naming\",children:\"\\u{1F928} Less forced naming\"}),`\n`,(0,e.jsx)(n.p,{children:\"With StyleSheets you must name every style group, and even every ternary conditional style or else you lose performance. With inline styles you avoid both problems, leading to more creative experimentation and less friction.\"}),`\n`,(0,e.jsx)(n.h4,{id:\"-encourages-dynamic-styles\",children:\"\\u{1F483} Encourages dynamic styles\"}),`\n`,(0,e.jsx)(n.p,{children:\"Changing between a style that's determined by a ternary or conditional and one that's static shouldn't be a hard choice. With StyleSheet there's some friction as you have to either inline it and save time and readability or extract it to the bottom and gain performance. With inline styles (and the compiler) you no longer have that friction: convert any prop to have a ternary and it works the same, and runs fast.\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{id:\"community\",children:\"Community\"}),`\n`,(0,e.jsx)(n.p,{children:\"We're excited to see the community adopt Tamagui, raise issues, and provide feedback. Whether it's a feature request, bug report, or a project to showcase, please get involved!\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://discord.gg/4qh6tdcVDa\",children:\"Discord\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://twitter.com/tamagui_js\",children:\"Twitter\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://github.com/tamagui/tamagui/discussions\",children:\"GitHub Discussions\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://github.com/tamagui/tamagui\",children:\"GitHub\"})}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{id:\"credits\",children:\"Credits\"}),`\n`,(0,e.jsx)(n.p,{children:\"A big thanks to:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.a,{href:\"https://github.com/jsxstyle/jsxstyle\",children:\"JSXStyle\"}),\" for providing the original forked repo.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.a,{href:\"https://github.com/modulz\",children:\"Modulz\"}),\" for the bones of the website.\"]}),`\n`]})]})}}var k=S;function T(i,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(x);})();\n;return Component;"},"__N_SSG":true}